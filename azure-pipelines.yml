trigger:
  branches:
    include: [ main, feature/*, fix/* ]
pr:
  branches:
    include: [ main, feature/*, fix/* ]

variables:
  dockerHubRepo: 'rayrayye/timeapp-api-new'    # ← API 镜像
  kustomizeRepo: 'https://github.com/RookieToExpert/az305.git'
  kustomizePath: 'kubernetes&docker/timeapp-config/overlays/prod/kustomization.yaml'
  IMG_NAME: 'docker.io/rayrayye/timeapp-api-new'  # ← kustomization.yaml 里的 newName
  counterKey: 'api-1'
  major: '1'

stages:
- stage: Build
  displayName: Build (api) & push SHA tag
  jobs:
  - job: build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Login Docker Hub
      inputs:
        command: login
        containerRegistry: 'toDockerHub'

    - bash: |
        set -e
        SHORT_SHA=$(echo $(Build.SourceVersion) | cut -c1-7)
        echo "##vso[task.setvariable variable=SHORT_SHA;isOutput=true]$SHORT_SHA"
        docker build -t $(dockerHubRepo):sha-$SHORT_SHA $(Build.SourcesDirectory)
        docker push $(dockerHubRepo):sha-$SHORT_SHA
      name: outvars
      displayName: Build & push :sha-<short>

- stage: Release
  displayName: Release (api only on main)
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  variables:
    SHORT_SHA: $[ stageDependencies.Build.build.outputs['outvars.SHORT_SHA'] ]
    patch: $[ counter(variables['counterKey'], 7) ]   # ← API 当前 1.7，写 7
    VERSION: '$(major).$(patch)'
  jobs:
  - job: release
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Login Docker Hub
      inputs:
        command: login
        containerRegistry: 'toDockerHub'

    - bash: |
        set -e
        docker pull $(dockerHubRepo):sha-$(SHORT_SHA)
        docker tag  $(dockerHubRepo):sha-$(SHORT_SHA) $(dockerHubRepo):$(VERSION)
        docker push $(dockerHubRepo):$(VERSION)
      displayName: Tag SHA -> SemVer & push

    - bash: |
        set -e
        sudo apt-get update -y
        sudo apt-get install -y jq
        curl -L https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 \
          -o /usr/local/bin/yq && chmod +x /usr/local/bin/yq

        rm -rf configrepo
        git clone https://$(GITHUB_TOKEN)@github.com/RookieToExpert/az305.git configrepo
        cd configrepo
        git checkout -b bump-api-$(VERSION)-$(Build.BuildId)

        FILE="$(kustomizePath)"
        yq -i '(.images[] | select(.newName == env(IMG_NAME)).newTag) = env(VERSION)' "$FILE"

        if git diff --quiet -- "$FILE"; then
          echo "[info] nothing changed, skip."
          exit 0
        fi

        git config user.name  "ado-bot"
        git config user.email "ado-bot@example.com"
        git add "$FILE"
        git commit -m "chore(api): bump to $(VERSION)"
        git push -u origin HEAD

        TITLE="Bump api to $(VERSION)"
        BODY="Auto bump from Azure DevOps"
        REPO="RookieToExpert/az305"
        PR=$(curl -sS -X POST "https://api.github.com/repos/$REPO/pulls" \
          -H "Authorization: token ${GITHUB_TOKEN}" \
          -H "Accept: application/vnd.github+json" \
          -d "{\"title\":\"${TITLE}\",\"body\":\"${BODY}\",\"head\":\"$(git rev-parse --abbrev-ref HEAD)\",\"base\":\"main\"}")
        echo "$PR" | jq -r '.html_url'
      env:
        GITHUB_TOKEN: $(GITHUB_TOKEN)
      displayName: Bump kustomize & open PR