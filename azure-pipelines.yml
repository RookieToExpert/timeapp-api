trigger:
  branches:
    include: [ main ]

pr:
  branches:
    include: [ main ]

variables:
- name: dockerHubRepo
  value: 'rayrayye/timeapp-api-new'          # ←改成你的 API 仓库
- name: dockerfilePath
  value: 'Dockerfile'
- name: buildContext
  value: '.'

# 版本号：纯 runtime 表达式（不要混用 $(macro)）
- name: major
  value: '1'
- name: counterKey
  value: 'api-1'
- name: VERSION
  value: $[ format('{0}.{1}', variables['major'], counter(variables['counterKey'], 0)) ]

# GitOps 目标（注意含 &）
- name: GITOPS_REPO
  value: 'RookieToExpert/az305'              # ←改成你的 GitOps 仓库
- name: CONFIG_DIR
  value: 'kubernetes&docker/timeapp-config/overlays/prod'
- name: IMG_NAME
  value: 'docker.io/rayrayye/timeapp-api-new' # ←与 kustomization.yaml 中 newName 完全一致

stages:
- stage: Build
  displayName: Build & Push API Image
  jobs:
  - job: build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Login Docker Hub
      inputs:
        command: login
        containerRegistry: 'toDockerHub'      # ←你的 DockerHub service connection

    - task: Docker@2
      displayName: Build+Push api:$(VERSION)
      inputs:
        command: buildAndPush
        repository: '$(dockerHubRepo)'
        Dockerfile: '$(dockerfilePath)'
        buildContext: '$(buildContext)'
        tags: |
          $(VERSION)

- stage: Release
  displayName: Bump api tag in GitOps & open PR
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - job: bump
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - bash: |
        set -euo pipefail
        sudo apt-get update -y
        sudo apt-get install -y jq
        curl -fsSL https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 \
          -o /usr/local/bin/yq && chmod +x /usr/local/bin/yq

        rm -rf configrepo
        git clone "https://${GITHUB_TOKEN}@github.com/${GITOPS_REPO}.git" configrepo
        cd configrepo

        BR="bump-api-$(VERSION)-${BUILD_BUILDID}"
        git checkout -b "$BR"

        TARGET_DIR="$(CONFIG_DIR)"
        FILE="kustomization.yaml"

        echo "[info] repo root: $(pwd)"
        echo "[info] check dir: \"$TARGET_DIR\""
        ls -la "$TARGET_DIR" || { echo "[error] not found: $TARGET_DIR"; exit 1; }

        cd "$TARGET_DIR"
        echo "[info] patching: $(pwd)/$FILE"
        yq -i '(.images[] | select(.newName == env(IMG_NAME)).newTag) = env(VERSION)' "$FILE"
        cd - >/dev/null

        if git diff --quiet -- "$TARGET_DIR/$FILE"; then
          echo "[info] nothing changed, skip."
          exit 0
        fi

        git config user.name  "ado-bot"
        git config user.email "ado-bot@example.com"
        git add "$TARGET_DIR/$FILE"
        git commit -m "chore(api): bump to $(VERSION)"
        git push -u origin "$BR"

        TITLE="chore(api): bump to $(VERSION)"
        PR=$(
          curl -sS -X POST "https://api.github.com/repos/${GITOPS_REPO}/pulls" \
            -H "Authorization: token ${GITHUB_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            -d "{\"title\":\"${TITLE}\",\"head\":\"${BR}\",\"base\":\"main\"}"
        )
        echo "$PR" | jq -r '.html_url'
      displayName: Bump kustomize & open PR (api)
      env:
        GITHUB_TOKEN: $(GITHUB_TOKEN)
        GITOPS_REPO: $(GITOPS_REPO)
        CONFIG_DIR: $(CONFIG_DIR)
        IMG_NAME: $(IMG_NAME)
        VERSION: $(VERSION)
