# azure-pipelines-api.yml
trigger: { branches: { include: [ main ] } }
pr:       { branches: { include: [ main ] } }

variables:
  apiRepo: 'docker.io/rayrayye/timeapp-api-new'   # 注意 -new
  dockerfilePath: 'Dockerfile'
  buildContext: '.'

  githubOrgRepo: 'RookieToExpert/az305'
  configPath: 'kubernetes&docker/timeapp-config/overlays/prod'

  major: '1'
  counterKey: 'api-1'
  patch: $[ counter(variables['counterKey'], 0) ]
  version: '$(major).$(patch)'

stages:
- stage: Build
  displayName: Build & Push (api)
  jobs:
  - job: build
    pool: { vmImage: 'ubuntu-latest' }
    steps:
    - task: Docker@2
      displayName: Login Docker Hub
      inputs: { command: login, containerRegistry: 'toDockerHub' }
    - task: Docker@2
      displayName: Build+Push api:$(version)
      inputs:
        command: buildAndPush
        repository: '$(apiRepo)'
        Dockerfile: '$(dockerfilePath)'
        buildContext: '$(buildContext)'
        tags: |
          $(version)

- stage: ConfigPR
  displayName: Create PR (bump api tag)
  dependsOn: Build
  jobs:
  - job: pr
    pool: { vmImage: 'ubuntu-latest' }
    steps:
    - checkout: none

    - script: |
        set -euo pipefail
        curl -L https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64 -o /usr/local/bin/yq
        chmod +x /usr/local/bin/yq
        sudo apt-get update -y && sudo apt-get install -y jq
      displayName: Install yq & jq

    - script: |
        set -euo pipefail

        git config --global user.name  "ado-bot"
        git config --global user.email "ado-bot@example.com"

        # 1) 克隆配置仓（用 PAT）
        GIT_URL="https://${GITHUB_TOKEN}@github.com/${GITHUB_REPO}.git"
        git clone "$GIT_URL" configrepo
        cd configrepo

        # 2) 新分支
        BR="bump-api-${VERSION}-${BUILD_ID}"
        git switch -c "$BR"

        echo "[info] searching kustomization.yaml …"
        # 3) 自动搜：优先 overlays/prod
        mapfile -t CANDIDATES < <(git ls-files | grep -E 'timeapp-config/.*/overlays/.*/kustomization\.yaml$' || true)

        if [ ${#CANDIDATES[@]} -eq 0 ]; then
          echo "[error] no kustomization.yaml found under timeapp-config/**/overlays/**"
          echo "[hint] confirm your repo layout. Example expected: kubernetes&docker/timeapp-config/overlays/prod/kustomization.yaml"
          exit 1
        fi

        echo "[info] candidates:"
        printf ' - %s\n' "${CANDIDATES[@]}"

        # 选 /overlays/prod/ 这个，如果没有，就用第一个
        FILE=""
        for f in "${CANDIDATES[@]}"; do
          if [[ "$f" =~ /overlays/prod/ ]]; then FILE="$f"; break; fi
        done
        if [ -z "$FILE" ]; then FILE="${CANDIDATES[0]}"; fi

        echo "[info] using kustomization: $FILE"

        # 4) 改 tag（确保 name 与 kustomization.yaml 的 images[].name 完全一致）
        yq -i '(.images[] | select(.name == env(IMG_NAME))).newTag = env(VERSION)' "$FILE"

        git add "$FILE"
        if git diff --cached --quiet; then
          echo "[info] nothing changed (maybe tag already ${VERSION})."
        else
          git commit -m "chore(api): bump to ${VERSION}"
          git push -u origin "$BR"

          # 5) 建 PR
          RESP=$(curl -sS -X POST "https://api.github.com/repos/${GITHUB_REPO}/pulls" \
            -H "Authorization: token ${GITHUB_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            -d "{\"title\":\"Bump api to ${VERSION}\",\"body\":\"Update api image tag to ${VERSION} for GitOps\",\"head\":\"$BR\",\"base\":\"main\",\"maintainer_can_modify\":true}")
          echo "[PR] $(echo "$RESP" | jq -r '.html_url')"
        fi
      displayName: 'Bump api tag & open PR (auto-locate)'
      env:
        GITHUB_TOKEN: $(GITHUB_TOKEN)          # 你在 DevOps Variable 里建的 Secret
        GITHUB_REPO:  RookieToExpert/az305     # <owner>/<repo>
        IMG_NAME:     docker.io/rayrayye/timeapp-api-new  # ← 必须与 kustomization.yaml 的 name 完全一致
        VERSION:      $(version)               # 你前面 Build 阶段生成的版本号
        BUILD_ID:     $(Build.BuildId)
